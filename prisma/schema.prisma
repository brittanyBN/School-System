generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Person is in one class, a person is in many lectures
model Person {
  personalNumber String   @id @default(cuid())
  name           String
  email          String   @unique
  password       String
  role           Role     @default(STUDENT)
  createdAt      DateTime @default(now())

  // RELATIONS
  lectures                 PersonOnLecture[]
  class                    Class?            @relation(fields: [classId], references: [id])
  classId                  String?
  departmentHeadForClass   Class?            @relation("DepartmentHead")
  departmentHeadForClassId String?           @unique
  teacherForLecture        Lecture[]
}

model Class {
  id   String @id @default(cuid())
  slug String @unique
  name String

  // RELATIONS
  students                 Person[]
  departmentHead           Person?   @relation("DepartmentHead", fields: [departmentHeadForClassId], references: [personalNumber])
  departmentHeadForClassId String?   @unique
  lectures                 Lecture[]
}

model Lecture {
  id          String   @id @default(cuid())
  slug        String   @unique
  className   String
  time        DateTime
  description String

  // RELATIONS
  students  PersonOnLecture[]
  class     Class?            @relation(fields: [classId], references: [id])
  classId   String?
  teacher   Person?           @relation(fields: [teacherId], references: [personalNumber])
  teacherId String?
}

model PersonOnLecture {
  person    Person?  @relation(fields: [personId], references: [personalNumber])
  personId  String // relation scalar field (used in the `@relation` attribute above)
  lecture   Lecture? @relation(fields: [lectureId], references: [id])
  lectureId String // relation scalar field (used in the `@relation` attribute above)
  attended  Boolean  @default(false)

  @@id([personId, lectureId])
}

enum Role {
  STUDENT
  TEACHER
}
